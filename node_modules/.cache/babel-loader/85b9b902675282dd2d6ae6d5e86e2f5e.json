{"ast":null,"code":"import _toConsumableArray from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\src\\\\components\\\\rotationMaker.js\";\nimport React from 'react';\nimport Dropdown from './dropdown';\nimport ColumnNames from './columnNames';\nimport Maps from '../mapData/maps';\nimport RotationItem from './rotationItem';\n\nvar RotationMakerApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RotationMakerApp, _React$Component);\n\n  function RotationMakerApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RotationMakerApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RotationMakerApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      mapsRotation: []\n    };\n\n    _this.handleAddMap = function (index) {\n      var mapRotationArray = _toConsumableArray(_this.state.mapsRotation);\n\n      mapRotationArray.push(Maps[index]); //maprotationlogic\n\n      _this.checkLayersForIssues(mapRotationArray);\n\n      _this.setState({\n        mapsRotation: mapRotationArray\n      });\n    };\n\n    _this.checkLayersForIssues = function (layers) {\n      var mapRotationLength = layers.length;\n      var newestIndex = mapRotationLength - 1;\n\n      if (mapRotationLength > 1) {\n        //faction check, see if same team next round.\n        if (layers[newestIndex].team1 === layers[newestIndex - 1].team2 || layers[newestIndex].team2 === layers[newestIndex - 1].team1) {\n          layers[newestIndex].warningMessage = \"Same Faction As Prev Layer\";\n        }\n      }\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Squad Map Rotation Maker\"), React.createElement(Dropdown, {\n        addMap: _this.handleAddMap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(ColumnNames, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), _this.state.mapsRotation.map(function (map, index) {\n        return React.createElement(RotationItem, {\n          key: map + index,\n          layer: map,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }));\n    };\n\n    return _this;\n  }\n\n  return RotationMakerApp;\n}(React.Component);\n\nexport default RotationMakerApp;","map":{"version":3,"sources":["C:\\code\\react\\squadrotationmaker\\src\\components\\rotationMaker.js"],"names":["React","Dropdown","ColumnNames","Maps","RotationItem","RotationMakerApp","state","mapsRotation","handleAddMap","index","mapRotationArray","push","checkLayersForIssues","setState","layers","mapRotationLength","length","newestIndex","team1","team2","warningMessage","render","map","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEMC,gB;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAAEC,MAAAA,YAAY,EAAE;AAAhB,K;;UAGRC,Y,GAAe,UAACC,KAAD,EAAW;AAEtB,UAAMC,gBAAgB,sBAAO,MAAKJ,KAAL,CAAWC,YAAlB,CAAtB;;AACAG,MAAAA,gBAAgB,CAACC,IAAjB,CAAsBR,IAAI,CAACM,KAAD,CAA1B,EAHsB,CAKtB;;AACA,YAAKG,oBAAL,CAA0BF,gBAA1B;;AACA,YAAKG,QAAL,CAAc;AAACN,QAAAA,YAAY,EAAEG;AAAf,OAAd;AAEH,K;;UAEDE,oB,GAAuB,UAACE,MAAD,EAAY;AAC/B,UAAIC,iBAAiB,GAAGD,MAAM,CAACE,MAA/B;AACA,UAAIC,WAAW,GAAGF,iBAAiB,GAAG,CAAtC;;AACA,UAAIA,iBAAiB,GAAG,CAAxB,EAA2B;AACvB;AACA,YAAID,MAAM,CAACG,WAAD,CAAN,CAAoBC,KAApB,KAA8BJ,MAAM,CAACG,WAAW,GAAG,CAAf,CAAN,CAAwBE,KAAtD,IAA+DL,MAAM,CAACG,WAAD,CAAN,CAAoBE,KAApB,KAA8BL,MAAM,CAACG,WAAW,GAAG,CAAf,CAAN,CAAwBC,KAAzH,EACA;AACIJ,UAAAA,MAAM,CAACG,WAAD,CAAN,CAAoBG,cAApB,GAAqC,4BAArC;AACH;AACJ;AACJ,K;;UAEDC,M,GAAS,YAAM;AAEX,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADA,EAEA,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,MAAKb,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EAGA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,EAIC,MAAKF,KAAL,CAAWC,YAAX,CAAwBe,GAAxB,CAA4B,UAACA,GAAD,EAAMb,KAAN;AAAA,eACzB,oBAAC,YAAD;AAAc,UAAA,GAAG,EAAEa,GAAG,GAAGb,KAAzB;AAAgC,UAAA,KAAK,EAAEa,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADyB;AAAA,OAA5B,CAJD,CADJ;AAUH,K;;;;;;EAvC0BtB,KAAK,CAACuB,S;;AA2CrC,eAAelB,gBAAf","sourcesContent":["import React from 'react';\r\nimport Dropdown from './dropdown'\r\nimport ColumnNames from './columnNames'\r\nimport Maps from '../mapData/maps'\r\nimport RotationItem from './rotationItem'\r\n\r\nclass RotationMakerApp extends React.Component {\r\n    state = { mapsRotation: [] };\r\n\r\n    //handle adding map to rotation\r\n    handleAddMap = (index) => {\r\n\r\n        const mapRotationArray = [...this.state.mapsRotation]\r\n        mapRotationArray.push(Maps[index]);\r\n\r\n        //maprotationlogic\r\n        this.checkLayersForIssues(mapRotationArray);\r\n        this.setState({mapsRotation: mapRotationArray})\r\n        \r\n    }\r\n\r\n    checkLayersForIssues = (layers) => {\r\n        let mapRotationLength = layers.length;\r\n        let newestIndex = mapRotationLength - 1;\r\n        if (mapRotationLength > 1) {\r\n            //faction check, see if same team next round.\r\n            if (layers[newestIndex].team1 === layers[newestIndex - 1].team2 || layers[newestIndex].team2 === layers[newestIndex - 1].team1) \r\n            {\r\n                layers[newestIndex].warningMessage = \"Same Faction As Prev Layer\"\r\n            }\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div>\r\n            <h1>Squad Map Rotation Maker</h1>    \r\n            <Dropdown addMap={this.handleAddMap}/> \r\n            <ColumnNames />\r\n            {this.state.mapsRotation.map((map, index) => (\r\n                <RotationItem key={map + index} layer={map} />\r\n            ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RotationMakerApp;"]},"metadata":{},"sourceType":"module"}