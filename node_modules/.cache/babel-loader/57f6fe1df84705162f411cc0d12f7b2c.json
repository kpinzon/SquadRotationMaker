{"ast":null,"code":"import _toConsumableArray from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\code\\\\react\\\\squadrotationmaker\\\\src\\\\components\\\\rotationMaker.js\";\nimport React from 'react';\nimport Dropdown from './dropdown';\nimport ColumnNames from './columnNames';\nimport Maps from '../mapData/maps';\nimport RotationItem from './rotationItem';\n\nvar RotationMakerApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RotationMakerApp, _React$Component);\n\n  function RotationMakerApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RotationMakerApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RotationMakerApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      mapsRotation: []\n    };\n\n    _this.handleAddMap = function (index) {\n      var mapRotationArray = _toConsumableArray(_this.state.mapsRotation);\n\n      mapRotationArray.push(Maps[index]); //maprotationlogic\n\n      var checkedArray = _this.checkLayersForIssues(mapRotationArray);\n\n      _this.setState({\n        mapsRotation: checkedArray\n      });\n    };\n\n    _this.handleMoveLayerUpInArray = function (index) {\n      var mapRotationArray = _toConsumableArray(_this.state.mapsRotation);\n\n      if (index > 0) {\n        var movedArray = _this.moveItemInArrayFromIndexToIndex(mapRotationArray, index, index - 1);\n\n        var checkedArray = _this.checkLayersForIssues(movedArray);\n\n        _this.setState({\n          mapsRotation: checkedArray\n        });\n      }\n    };\n\n    _this.handleMoveLayerDownInArray = function (index) {\n      var mapRotationArray = _toConsumableArray(_this.state.mapsRotation);\n\n      if (index < mapRotationArray.length - 1) {\n        var movedArray = _this.moveItemInArrayFromIndexToIndex(mapRotationArray, index, index + 1);\n\n        var checkedArray = _this.checkLayersForIssues(movedArray);\n\n        _this.setState({\n          mapsRotation: checkedArray\n        });\n      }\n    };\n\n    _this.moveItemInArrayFromIndexToIndex = function (array, fromIndex, toIndex) {\n      if (fromIndex === toIndex) return array;\n\n      var newArray = _toConsumableArray(array);\n\n      var target = newArray[fromIndex];\n      var inc = toIndex < fromIndex ? -1 : 1;\n\n      for (var i = fromIndex; i !== toIndex; i += inc) {\n        newArray[i] = newArray[i + inc];\n      }\n\n      newArray[toIndex] = target;\n      return newArray;\n    };\n\n    _this.checkLayersForIssues = function (layers) {\n      var mapRotationLength = layers.length;\n      var checkedArray = layers.map(function (layer, index) {\n        if (mapRotationLength > 1) {\n          if (index !== 0) {\n            if (layer.team1 === layers[index - 1].team2 || layer.team2 === layers[index - 1].team1) {\n              layer.warningMessage = \"Same Faction As Prev Layer\";\n            } else if (layer.attackersId === 'team1' && layers[index - 1].attackersId === 'team2' || layer.attackersId === 'team2' && layers[index - 1].attackersId === 'team1') {\n              layer.warningMessage = \"Same ATK/DEF Side As Prev Layer\";\n            }\n          }\n        }\n\n        if (mapRotationLength > 2) {\n          if (index === 0) {\n            if (layer.team1 === layers[mapRotationLength - 1].team2 || layer.team2 === layers[mapRotationLength - 1].team1) {\n              layer.warningMessage = \"Same Faction As Prev Layer\";\n            } else if (layer.attackersId === 'team1' && layers[mapRotationLength - 1].attackersId === 'team2' || layer.attackersId === 'team2' && layers[mapRotationLength - 1].attackersId === 'team1') {\n              layer.warningMessage = \"Same ATK/DEF Side As Prev Layer\";\n            }\n          }\n        }\n\n        return checkedArray;\n      }); // let mapRotationLength = layers.length;\n      // let newestIndex = mapRotationLength - 1;\n      // if (mapRotationLength > 1) {\n      //     //faction check, see if same team next round.\n      //     if (layers[newestIndex].team1 === layers[newestIndex - 1].team2 || layers[newestIndex].team2 === layers[newestIndex - 1].team1) \n      //     {\n      //         layers[newestIndex].warningMessage = \"Same Faction As Prev Layer\"\n      //     }\n      //     else if ((layers[newestIndex].attackersId === 'team1' && layers[newestIndex - 1].attackersId === 'team2') || (layers[newestIndex].attackersId === 'team2' && layers[newestIndex - 1].attackersId === 'team1')) \n      //     {\n      //         layers[newestIndex].warningMessage = \"Same ATK/DEF Side As Prev Layer\"\n      //     }\n      // }\n      // if (mapRotationLength > 2) {\n      //     if (layers[0].team1 === layers[newestIndex].team2 || layers[0].team2 === layers[newestIndex].team1) {\n      //         layers[0].warningMessage = \"Same Faction As Prev Layer\"\n      //     }\n      //     else if ((layers[0].attackersId === 'team1' && layers[newestIndex].attackersId === 'team2') || (layers[0].attackersId === 'team2' && layers[newestIndex].attackersId === 'team1')) \n      //     {\n      //         layers[0].warningMessage = \"Same ATK/DEF Side As Prev Layer\"\n      //     }\n      // }\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Squad Map Rotation Maker\"), React.createElement(Dropdown, {\n        addMap: _this.handleAddMap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(ColumnNames, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), _this.state.mapsRotation.map(function (map, index) {\n        return React.createElement(RotationItem, {\n          key: map + index,\n          layer: map,\n          index: index,\n          handleMoveUp: _this.handleMoveLayerUpInArray,\n          handleMoveDown: _this.handleMoveLayerDownInArray,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      }));\n    };\n\n    return _this;\n  }\n\n  return RotationMakerApp;\n}(React.Component);\n\nexport default RotationMakerApp;","map":{"version":3,"sources":["C:\\code\\react\\squadrotationmaker\\src\\components\\rotationMaker.js"],"names":["React","Dropdown","ColumnNames","Maps","RotationItem","RotationMakerApp","state","mapsRotation","handleAddMap","index","mapRotationArray","push","checkedArray","checkLayersForIssues","setState","handleMoveLayerUpInArray","movedArray","moveItemInArrayFromIndexToIndex","handleMoveLayerDownInArray","length","array","fromIndex","toIndex","newArray","target","inc","i","layers","mapRotationLength","map","layer","team1","team2","warningMessage","attackersId","render","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Dropdown from './dropdown'\r\nimport ColumnNames from './columnNames'\r\nimport Maps from '../mapData/maps'\r\nimport RotationItem from './rotationItem'\r\n\r\nclass RotationMakerApp extends React.Component {\r\n    state = { mapsRotation: [] };\r\n\r\n    //handle adding map to rotation\r\n    handleAddMap = (index) => {\r\n\r\n        const mapRotationArray = [...this.state.mapsRotation]\r\n        mapRotationArray.push(Maps[index]);\r\n\r\n        //maprotationlogic\r\n        let checkedArray =  this.checkLayersForIssues(mapRotationArray);\r\n        this.setState({ mapsRotation: checkedArray })\r\n\r\n    }\r\n\r\n    handleMoveLayerUpInArray = (index) => {\r\n        const mapRotationArray = [...this.state.mapsRotation]\r\n\r\n        if (index > 0) {\r\n            let movedArray = this.moveItemInArrayFromIndexToIndex(mapRotationArray, index, index - 1);\r\n            let checkedArray = this.checkLayersForIssues(movedArray);\r\n            this.setState({ mapsRotation: checkedArray })\r\n        }\r\n    }\r\n\r\n    handleMoveLayerDownInArray = (index) => {\r\n        const mapRotationArray = [...this.state.mapsRotation]\r\n\r\n        if (index < mapRotationArray.length - 1) {\r\n            let movedArray = this.moveItemInArrayFromIndexToIndex(mapRotationArray, index, index + 1);\r\n            let checkedArray = this.checkLayersForIssues(movedArray);\r\n            this.setState({ mapsRotation: checkedArray })\r\n        }\r\n    }\r\n\r\n    moveItemInArrayFromIndexToIndex = (array, fromIndex, toIndex) => {\r\n        if (fromIndex === toIndex) return array;\r\n\r\n        const newArray = [...array];\r\n\r\n        const target = newArray[fromIndex];\r\n        const inc = toIndex < fromIndex ? -1 : 1;\r\n\r\n        for (let i = fromIndex; i !== toIndex; i += inc) {\r\n            newArray[i] = newArray[i + inc];\r\n        }\r\n\r\n        newArray[toIndex] = target;\r\n\r\n        return newArray;\r\n    };\r\n\r\n    checkLayersForIssues = (layers) => {\r\n        const mapRotationLength = layers.length;\r\n        let checkedArray = layers.map((layer, index) => {\r\n            if (mapRotationLength > 1) {\r\n                if (index !== 0) {\r\n                    if (layer.team1 === layers[index - 1].team2 || layer.team2 === layers[index - 1].team1) {\r\n                        layer.warningMessage = \"Same Faction As Prev Layer\"\r\n                    }\r\n\r\n                    else if ((layer.attackersId === 'team1' && layers[index - 1].attackersId === 'team2') || (layer.attackersId === 'team2' && layers[index - 1].attackersId === 'team1')) {\r\n                        layer.warningMessage = \"Same ATK/DEF Side As Prev Layer\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (mapRotationLength > 2) {\r\n                if (index === 0) {\r\n                    if (layer.team1 === layers[mapRotationLength - 1].team2 || layer.team2 === layers[mapRotationLength - 1].team1) {\r\n                        layer.warningMessage = \"Same Faction As Prev Layer\"\r\n                    }\r\n    \r\n                    else if ((layer.attackersId === 'team1' && layers[mapRotationLength - 1].attackersId === 'team2') || (layer.attackersId === 'team2' && layers[mapRotationLength - 1].attackersId === 'team1')) {\r\n                        layer.warningMessage = \"Same ATK/DEF Side As Prev Layer\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            return checkedArray;\r\n        })\r\n\r\n\r\n        // let mapRotationLength = layers.length;\r\n        // let newestIndex = mapRotationLength - 1;\r\n        // if (mapRotationLength > 1) {\r\n        //     //faction check, see if same team next round.\r\n        //     if (layers[newestIndex].team1 === layers[newestIndex - 1].team2 || layers[newestIndex].team2 === layers[newestIndex - 1].team1) \r\n        //     {\r\n        //         layers[newestIndex].warningMessage = \"Same Faction As Prev Layer\"\r\n        //     }\r\n\r\n        //     else if ((layers[newestIndex].attackersId === 'team1' && layers[newestIndex - 1].attackersId === 'team2') || (layers[newestIndex].attackersId === 'team2' && layers[newestIndex - 1].attackersId === 'team1')) \r\n        //     {\r\n        //         layers[newestIndex].warningMessage = \"Same ATK/DEF Side As Prev Layer\"\r\n        //     }\r\n        // }\r\n\r\n        // if (mapRotationLength > 2) {\r\n        //     if (layers[0].team1 === layers[newestIndex].team2 || layers[0].team2 === layers[newestIndex].team1) {\r\n        //         layers[0].warningMessage = \"Same Faction As Prev Layer\"\r\n        //     }\r\n\r\n        //     else if ((layers[0].attackersId === 'team1' && layers[newestIndex].attackersId === 'team2') || (layers[0].attackersId === 'team2' && layers[newestIndex].attackersId === 'team1')) \r\n        //     {\r\n        //         layers[0].warningMessage = \"Same ATK/DEF Side As Prev Layer\"\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Squad Map Rotation Maker</h1>\r\n                <Dropdown addMap={this.handleAddMap} />\r\n                <ColumnNames />\r\n                {this.state.mapsRotation.map((map, index) => (\r\n                    <RotationItem key={map + index} layer={map} index={index} handleMoveUp={this.handleMoveLayerUpInArray} handleMoveDown={this.handleMoveLayerDownInArray} />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RotationMakerApp;"]},"metadata":{},"sourceType":"module"}